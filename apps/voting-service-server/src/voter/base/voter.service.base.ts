/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Voter as PrismaVoter,
  Vote as PrismaVote,
} from "@prisma/client";

export class VoterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VoterCountArgs, "select">): Promise<number> {
    return this.prisma.voter.count(args);
  }

  async voters(args: Prisma.VoterFindManyArgs): Promise<PrismaVoter[]> {
    return this.prisma.voter.findMany(args);
  }
  async voter(args: Prisma.VoterFindUniqueArgs): Promise<PrismaVoter | null> {
    return this.prisma.voter.findUnique(args);
  }
  async createVoter(args: Prisma.VoterCreateArgs): Promise<PrismaVoter> {
    return this.prisma.voter.create(args);
  }
  async updateVoter(args: Prisma.VoterUpdateArgs): Promise<PrismaVoter> {
    return this.prisma.voter.update(args);
  }
  async deleteVoter(args: Prisma.VoterDeleteArgs): Promise<PrismaVoter> {
    return this.prisma.voter.delete(args);
  }

  async findVotes(
    parentId: string,
    args: Prisma.VoteFindManyArgs
  ): Promise<PrismaVote[]> {
    return this.prisma.voter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .votes(args);
  }
}
