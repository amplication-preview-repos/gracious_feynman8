/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ElectionService } from "../election.service";
import { ElectionCreateInput } from "./ElectionCreateInput";
import { Election } from "./Election";
import { ElectionFindManyArgs } from "./ElectionFindManyArgs";
import { ElectionWhereUniqueInput } from "./ElectionWhereUniqueInput";
import { ElectionUpdateInput } from "./ElectionUpdateInput";
import { VoteFindManyArgs } from "../../vote/base/VoteFindManyArgs";
import { Vote } from "../../vote/base/Vote";
import { VoteWhereUniqueInput } from "../../vote/base/VoteWhereUniqueInput";

export class ElectionControllerBase {
  constructor(protected readonly service: ElectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Election })
  async createElection(
    @common.Body() data: ElectionCreateInput
  ): Promise<Election> {
    return await this.service.createElection({
      data: data,
      select: {
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Election] })
  @ApiNestedQuery(ElectionFindManyArgs)
  async elections(@common.Req() request: Request): Promise<Election[]> {
    const args = plainToClass(ElectionFindManyArgs, request.query);
    return this.service.elections({
      ...args,
      select: {
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Election })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async election(
    @common.Param() params: ElectionWhereUniqueInput
  ): Promise<Election | null> {
    const result = await this.service.election({
      where: params,
      select: {
        createdAt: true,
        description: true,
        endTime: true,
        id: true,
        startTime: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Election })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateElection(
    @common.Param() params: ElectionWhereUniqueInput,
    @common.Body() data: ElectionUpdateInput
  ): Promise<Election | null> {
    try {
      return await this.service.updateElection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Election })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteElection(
    @common.Param() params: ElectionWhereUniqueInput
  ): Promise<Election | null> {
    try {
      return await this.service.deleteElection({
        where: params,
        select: {
          createdAt: true,
          description: true,
          endTime: true,
          id: true,
          startTime: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/votes")
  @ApiNestedQuery(VoteFindManyArgs)
  async findVotes(
    @common.Req() request: Request,
    @common.Param() params: ElectionWhereUniqueInput
  ): Promise<Vote[]> {
    const query = plainToClass(VoteFindManyArgs, request.query);
    const results = await this.service.findVotes(params.id, {
      ...query,
      select: {
        candidate: true,
        createdAt: true,

        election: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,

        voter: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/votes")
  async connectVotes(
    @common.Param() params: ElectionWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        connect: body,
      },
    };
    await this.service.updateElection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/votes")
  async updateVotes(
    @common.Param() params: ElectionWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        set: body,
      },
    };
    await this.service.updateElection({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/votes")
  async disconnectVotes(
    @common.Param() params: ElectionWhereUniqueInput,
    @common.Body() body: VoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      votes: {
        disconnect: body,
      },
    };
    await this.service.updateElection({
      where: params,
      data,
      select: { id: true },
    });
  }
}
