/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Election as PrismaElection,
  Vote as PrismaVote,
} from "@prisma/client";

export class ElectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ElectionCountArgs, "select">): Promise<number> {
    return this.prisma.election.count(args);
  }

  async elections(
    args: Prisma.ElectionFindManyArgs
  ): Promise<PrismaElection[]> {
    return this.prisma.election.findMany(args);
  }
  async election(
    args: Prisma.ElectionFindUniqueArgs
  ): Promise<PrismaElection | null> {
    return this.prisma.election.findUnique(args);
  }
  async createElection(
    args: Prisma.ElectionCreateArgs
  ): Promise<PrismaElection> {
    return this.prisma.election.create(args);
  }
  async updateElection(
    args: Prisma.ElectionUpdateArgs
  ): Promise<PrismaElection> {
    return this.prisma.election.update(args);
  }
  async deleteElection(
    args: Prisma.ElectionDeleteArgs
  ): Promise<PrismaElection> {
    return this.prisma.election.delete(args);
  }

  async findVotes(
    parentId: string,
    args: Prisma.VoteFindManyArgs
  ): Promise<PrismaVote[]> {
    return this.prisma.election
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .votes(args);
  }
}
